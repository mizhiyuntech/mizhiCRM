name: Performance Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  performance-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        CI: true

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Run custom performance tests
      run: npm run performance:test
      env:
        BASE_URL: http://localhost:3000
        HEADLESS: true

    - name: Analyze bundle size
      run: npm run vite:analyze

    - name: Check bundle size limits
      uses: andresz1/size-limit-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: performance-reports/
        retention-days: 30

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read performance summary
          const summaryPath = path.join('performance-reports', 'overall-summary.json');
          if (fs.existsSync(summaryPath)) {
            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            
            const comment = `## 🚀 Performance Report
            
            **Performance Score:** ${summary.performanceScore}/100
            **Average Load Time:** ${summary.averageLoadTime.toFixed(2)}ms
            **Pages Analyzed:** ${summary.totalPages}
            
            ### Recommendations
            ${summary.performanceScore < 80 ? '⚠️ Performance needs improvement' : '✅ Good performance'}
            
            [View detailed reports in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Fail if performance degrades
      run: |
        node -e "
        const fs = require('fs');
        const summary = JSON.parse(fs.readFileSync('performance-reports/overall-summary.json', 'utf8'));
        
        if (summary.performanceScore < 70) {
          console.error('❌ Performance score is below threshold (70). Current score:', summary.performanceScore);
          process.exit(1);
        }
        
        if (summary.averageLoadTime > 5000) {
          console.error('❌ Average load time is too high. Current:', summary.averageLoadTime + 'ms');
          process.exit(1);
        }
        
        console.log('✅ Performance checks passed');
        "

  bundle-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Analyze webpack bundle
      run: npm run webpack:analyze

    - name: Check for large dependencies
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Check if bundle analysis exists
        const analysisPath = path.join('dist', 'bundle-analysis.html');
        if (fs.existsSync(analysisPath)) {
          console.log('✅ Bundle analysis generated successfully');
        } else {
          console.log('⚠️ Bundle analysis not found');
        }
        
        // Analyze package.json for heavy dependencies
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const heavyPackages = ['moment', 'lodash', 'rxjs'];
        const foundHeavy = [];
        
        Object.keys(pkg.dependencies || {}).forEach(dep => {
          if (heavyPackages.some(heavy => dep.includes(heavy) && !dep.includes('-es'))) {
            foundHeavy.push(dep);
          }
        });
        
        if (foundHeavy.length > 0) {
          console.log('⚠️ Found potentially heavy dependencies:', foundHeavy.join(', '));
          console.log('Consider lighter alternatives like lodash-es, date-fns instead of moment');
        } else {
          console.log('✅ No heavy dependencies detected');
        }
        "

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v3
      with:
        name: bundle-analysis
        path: dist/bundle-analysis.html
        retention-days: 30

  lighthouse-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build and start application
      run: |
        npm run build
        npm start &
        sleep 15

    - name: Run Lighthouse
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Check Core Web Vitals
      run: |
        node -e "
        const fs = require('fs');
        const glob = require('glob');
        
        // Find lighthouse report files
        const reports = glob.sync('.lighthouseci/lhr-*.json');
        
        if (reports.length === 0) {
          console.log('⚠️ No Lighthouse reports found');
          process.exit(0);
        }
        
        reports.forEach(reportPath => {
          const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
          const audits = report.audits;
          
          console.log('📊 Core Web Vitals:');
          console.log('LCP (Largest Contentful Paint):', audits['largest-contentful-paint'].displayValue);
          console.log('FID (First Input Delay):', audits['max-potential-fid'].displayValue);
          console.log('CLS (Cumulative Layout Shift):', audits['cumulative-layout-shift'].displayValue);
          console.log('FCP (First Contentful Paint):', audits['first-contentful-paint'].displayValue);
          console.log('Performance Score:', report.categories.performance.score * 100);
          
          // Check thresholds
          const perfScore = report.categories.performance.score * 100;
          if (perfScore < 80) {
            console.log('⚠️ Performance score is below 80');
          } else {
            console.log('✅ Good performance score');
          }
        });
        "

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        npm outdated || true
        
        echo "🔍 Checking for security vulnerabilities..."
        npx audit-ci --moderate